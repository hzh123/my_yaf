<?php/** * Created by JetBrains PhpStorm. * User: jet * Date: 13-10-10 * Time: 上午11:31 * To change this template use File | Settings | File Templates. */class MemCacheBase{    /**     * @var MemcacheBase     */    static private $instance;    /**     * @var Memcache     */    static private $mc;    static private $mcArray;//mc的数组    static private $tableKeyMap;//存储table表名和key之间的关系    const EXPIRE_DEFAULT = 86400;    const EXPIRE_SHORT_TERM = 180;    const EXPIRE_LONG_TERM = 604800;    const EXPIRE_MONTH_TERM = 2592000;    /**     * unique key     */    const INFO_WEIBO_USER = 'info_weibo_user';              //Weibo User info    const INFO_OBJID_TO_WID = 'info_objid_to_wid';              //objId to wid    const INFO_JOB_BRIEF_INFO = "info_job_brief_info";          //job brief info    const INFO_JOB_DETAIL_INFO = "info_job_detail_info";          //job detail info    const INFO_JOB_APPLIED_INFO = "info_job_applied_info";          //job detail info    const INFO_INTEREST_JOB_UIDS = "info_interest_job_uids";        //interest job list by uid    const INFO_INTEREST_JOB_LIST = "info_interest_job_list";        //interest job list    const INFO_HOT_JOB_LIST = "info_hot_job_list";        //hot job list    const INFO_LATEST_JOB_LIST = "info_latest_job_list";        //latest job list    const INFO_USER_STATUS = 'info_user_status';            //User status    const INFO_INTEREST_STATUS = 'info_interest_status';            //User status    const INFO_INDUSTRY = 'info_industry';                  //Industry info    const INFO_CITY_LIST = 'info_location';                  //cities    const INFO_PURCHASE_EXPIRE = "info_purchase_expire";    //    const INFO_COMPANY_USER = "info_company_user";    const INFO_COMPANY_USER_TEMP_LOGO = 'info_company_user_temp_logo';    const INFO_RESUME_DETAIL = "info_resume_detail";    const INFO_RESUME_COMPLETENESS = "info_resume_completeness";    //    const INFO_HOT_SEARCH_KEY = "info_hot_search_key";     //    const INFO_HOT_CITY = "info_hot_city";    const INFO_HOT_CATEGORY = "info_hot_category";    const INFO_HOT_TITLE = "info_hot_title";    const INFO_FAMOUS_RECRUIT = "info_famous_recruit";    const INFO_INDEX_COMPANIES = "info_index_companies";    const INFO_COMPANY_CEO = "info_company_ceo";    const INFO_COMPANY_STAFF = "info_comapny_staff";    const INFO_COMPANY_REVIEW_LIST = "info_company_review_list";    const INFO_COMPANY_PHOTOS = "info_company_photos";    const INFO_COMPANY_TAGS_BY_INDUSTRY = "info_company_tags_by_industry";    const INFO_COMPANY_TOP_TAGS = "info_company_top_tags";    const INFO_COMPANY_RANKING_BY_INDUSTRY = "info_company_ranking_by_industry";    const INFO_SHORT_URL = "info_short_url";    const INFO_USER_PORTRAIT = "info_user_portrait";    const INFO_ACT_WEIBO_PEOPLE_LIST = "info_act_weibo_people_list";    const INFO_ACT_PIC_AD_LIST = "info_act_pic_ad_list";    const INFO_ACT_PK_LIST = "info_act_pk_list";    const INFO_ACT_FOLLOW_RELATION = "info_act_follow_relation";    const INFO_ACT_HOT_COMPANY_WITH_TAG = "info_act_hot_company_with_tag";    const INFO_ACT_FAVORITE_COMPANY_RANKING = "info_act_favorite_company_ranking";    const INFO_ACT_RANDOM_COMPANY = "info_act_random_company";    const INFO_ACT_SCHOOL_RANKING = "info_act_school_ranking";    const INFO_SPECIAL_TEMPLATE_DATA = "info_special_template_data";    const INFO_PINYIN_TABLE = "info_pinyin_table";  //Pinyin table    public function __construct($mcName='web')    {        MemCacheBase::getMc($mcName);    }    public static function singleton()    {        if (self::$instance == null)        {            self::$instance = new MemCacheBase();        }        return self::$instance;    }    /**     * generate key     * @param $ids     * @param $tag     * @return string     */    public  function makeKey($id, $tag)    {        if (self::$mc == null)            return "";        $prefix = self::$mc->get('ns:'.$tag);        if($prefix === false)        {            $prefix = sprintf('%s#%d', $tag, substr(strval(time()), -4));            self::$mc->set('ns:'.$tag, $prefix, 0, 86400*3);        }                if (!empty($id))        {            $prefix .= '#'.$id;        }        $prefix .= "_".WZhaopinEnv::getVersion();        return $prefix;    }    public function invalidAllValuesByTag($tag)    {        $prefix = self::$mc->get('ns:'.$tag);        if($prefix)        {            $prefix = sprintf('%s#%d', $tag, substr(strval(time()), -4));            self::$mc->set('ns:'.$tag, $prefix, 0, 86400*3);        }    }    /**     * init MC SEVER     * @param string $name     * @return Memcache     * @throws Exception     */    private static function getMc($name='web')    {        if (self::$mc == null){            $config = Yaf_Registry::get('config');            $mcConfig = $config->memcache;            if (empty($mcConfig))            {                Logger::ERROR('Failed to connect to memcache !');            }            $serverCount = intval($mcConfig->$name->count);            if ($serverCount > 0)            {                try{                    $memcache = new Memcache();                    for($i = 1; $i<= $serverCount; $i++)                    {                        $hostKey = 'host_'.$i;                        $portKey = 'port_'.$i;                        $memcache->addServer($mcConfig->$name->$hostKey, $mcConfig->$name->$portKey);                    }                    self::$mc = $memcache;                } catch(Exception $e){                    Logger::ERROR('Failed to connect to memcache !');                }            }        }    }    /**     * @param $key     * @param $data     * @param int $expire     * @return bool     */    public function set($key, &$data, $expire= MemCacheBase::EXPIRE_DEFAULT)    {        if(self::$mc == null || empty($key))            return false;        $ret = self::$mc->set($key, $data, 0, $expire);        return $ret;    }    /**     * @param $key     * @return array|bool|string     */    public function get($key)    {        if ( self::$mc == null || empty($key))            return false;                $ret = self::$mc->get($key);        return $ret;    }    private function delete($key)    {//        Logger::DEBUG(sprintf('delete tag :%s',$key));        if ( self::$mc == null ) return false;                return self::$mc->delete($key);    }    public function setByIdAndTag($id, $tag, &$data, $expire= MemCacheBase::EXPIRE_DEFAULT)    {        if($data == '')        {            Logger::DEBUG('row is empty');        }        return $this->set($this->makeKey($id, $tag), $data, $expire);     }    public function getByIdAndTag($id, $tag)    {        return $this->get($this->makeKey($id, $tag));    }    public function flush()    {        if ( self::$mc == null )            return;        self::$mc->flush();    }    public function deleteByIdAndTag($id, $tag)    {        if ( self::$mc == null || empty($tag)) return;                $key = $this->makeKey($id, $tag);        $this->delete($key);    }    function increment($tag, $id, $count)    {        $key = $this->makeKey($id, $tag);        $ret = self::$mc->increment($key, $count);    }        /**     * 过滤已存在memcache的内容     * @param $uids     * @param $tag     * @param $result     * @return array     */    public function getMissedId($uids,$tag,&$result)    {        $remainIds = array();        foreach($uids as $uid)        {            $dataMc = $this->getByIdAndTag($tag,$uid);            if($dataMc)            {                $result[]=$dataMc;            }            else            {                $remainIds[]=$uid;            }        }        return $remainIds;    }        public function setArrayWithIdKey($key,$tag,$array)    {        foreach($array as $a)        {            $id = $a[$key];            if(isset($id))            {                $this->setByIdAndTag($tag,$id,$a,self::EXPIRE_DEFAULT);            }        }    }}